name: r5a10

configs:
  mariadb_initdb:
    file: ./mariadb/docker-entrypoint-initdb.d
  postgresql_initdb:
    file: ./postgresql/docker-entrypoint-initdb.d
  pgadmin_config:
    file: ./pgadmin-servers.json
  prometheus_config:
    file: ./prometheus/prometheus.yml
  otel_collector_config:
    file: ./telemetry/opentelemetry/otel-collector-config.yml
  grafana_datasources:
    file: ./grafana/provisioning/datasources
  grafana_dashboards:
    file: ./grafana/dashboards
  loki_config:
    file: ./telemetry/local-config.yaml
  alloy_config:
    file: ./telemetry/alloy/config.alloy
  rabbit_enabled_plugins:
    file: ./telemetry/rabbit_enabled_plugins

volumes:
  couchdb: {}
  ferretdb: {}
  grafana: {}
  mailpit: {}
  mariadb: {}
  mongodb: {}
  mongodb_config: {}
  n8n: {}
  neo4j: {}
  neo4j_logs: {}
  pgadmin: {}
  postgresql: {}
  redis: {}
  prometheus: {}
  couchbase: {}
  loki: {}
  rabbitmq: {}
  rabbitmq_log: {}

services:

# MariaDB Server
# One of the most popular open source relational databases
# https://mariadb.org/
# DockerFile from 11.6-ubi
# https://github.com/MariaDB/mariadb-docker

  mariadb:
    container_name: r5a10-mariadb
    build:
      context: ./mariadb
    healthcheck:
      test: ["CMD", "healthcheck.sh", "--connect", "--innodb_initialized"]
      interval: 60s
      timeout: 5s
      retries: 3
      start_period: 20s
    restart: no
    configs:
      - source: mariadb_initdb
        target: /docker-entrypoint-initdb.d
    volumes:
      - mariadb:/var/lib/mysql
      - ./data:/data
    ports:
      - 3306:3306
    environment:
      MARIADB_ROOT_PASSWORD: ${DB_ROOT_PASSWORD:-example}
    profiles:
      - mariadb

# PostgreSQL
# The world's most advanced open source relational database
# https://www.postgresql.org/

  postgresql:
    container_name:  r5a10-postgresql
    build:
      context: ./postgresql
    healthcheck:
      test: ["CMD-SHELL", "sh -c 'pg_isready -U postgres -d ${DB_NAME}'"]
      interval: 60s
      timeout: 5s
      retries: 3
      start_period: 45s
    restart: no
    configs:
      - source: postgresql_initdb
        target: /docker-entrypoint-initdb.d/
    volumes:
      - postgresql:/var/lib/postgresql/data
    ports:
      - 5432:5432
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_ROOT_PASSWORD:-example}
    profiles:
      - postgresql

# Directus
# The backend to build anything or everything.
# https://directus.io/

  directus:
    container_name: r5a10-directus
    image: directus/directus:${DIRECTUS_VERSION:-11.1.0}
    restart: no
    volumes:
      - ./directus/uploads:/directus/uploads
      - ./directus/extensions:/directus/extensions
    ports:
      - 3001:${DIRECTUS_PORT:-8081}
    depends_on:
      mariadb:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      KEY: ${DIRECTUS_KEY}
      SECRET: ${DIRECTUS_SECRET}
      PUBLIC_URL: http://127.0.0.1:3001/
      PORT: ${DIRECTUS_PORT:-8081}

      DB_CLIENT: ${DIRECTUS_DB_CLIENT:-pg}
      DB_HOST: ${DIRECTUS_DB_HOST:-postgresql}
      DB_PORT: ${DIRECTUS_DB_PORT:-5432}
      DB_DATABASE: ${DB_NAME}
      DB_USER: postgres
      DB_PASSWORD: supermotdepasse

      CACHE_ENABLED: true
      CACHE_AUTO_PURGE: true
      CACHE_STORE: redis
      REDIS_HOST: ${REDIS_HOST:-redis}
      REDIS_PASSWORD: ${DB_ROOT_PASSWORD}

      ADMIN_EMAIL: ${ADMIN_EMAIL}
      ADMIN_PASSWORD: ${ADMIN_PASSWORD}

      EMAIL_FROM: directus@univ-lorraine.fr
      EMAIL_TRANSPORT: smtp
      EMAIL_SMTP_HOST: ${SMTP_HOST:-mailpit}
      EMAIL_SMTP_PORT: ${SMTP_PORT:-1025}
    profiles:
      - admin

# Metabase
# Business Intelligence, Dashboards, and Data Visualization
# https://www.metabase.com/

  metabase:
    container_name: r5a10-metabase
    image: metabase/metabase:latest
    healthcheck:
      test: curl --fail -I http://localhost:3000/api/health || exit 1
      interval: 15s
      timeout: 5s
      retries: 5
    depends_on:
      postgresql:
        condition: service_healthy
    volumes:
      - /dev/urandom:/dev/random:ro
    ports:
      - 3002:3000
    environment:
      MB_DB_TYPE: ${MB_DB_TYPE:-postgres}
      MB_DB_HOST: ${MB_DB_HOST:-postgresql}
      MB_DB_PORT: ${MB_DB_HOST:-5432}
      MB_DB_USER: ${MB_DB_USER:-metabase}
      MB_DB_PASS: ${DB_PASSWORD}
      MB_DB_DBNAME: ${MB_DB_DBNAME:-metabase}
      MB_SITE_LOCALE: fr
      MB_ADMIN_EMAIL: ${ADMIN_EMAIL}
      MB_ANON_TRACKING_ENABLED: false
      MB_CHECK_FOR_UPDATES: false
      MB_NO_SURVEYS: yes
      MB_START_OF_WEEK: monday
      MB_CUSTOM_FORMATTING: '{"type/Temporal":{"time_style":"HH:mm","date_style":"D MMMM, YYYY","date_abbreviate":true},"type/Currency":{"currency":"EUR"},"type/Number":{"number_separators":", "}}'
      MB_EMAIL_SMTP_HOST: mailpit
      MB_EMAIL_SMTP_PORT: 1025
      MB_EMAIL_FROM_ADDRESS: metabase@univ-lorraine.fr
    profiles:
      - admin

# N8N
# Powerful Workflow Automation Software & Tools
# https://n8n.io/

  n8n:
    container_name: r5a10-n8n
    image: docker.n8n.io/n8nio/n8n
    depends_on:
      postgresql:
        condition: service_healthy
    volumes:
      - n8n:/home/node/.n8n
    ports:
      - 3003:5678
    environment:
      GENERIC_TIMEZONE: Europe/Paris
      TZ: Europe/Paris
      N8N_DEFAULT_LOCALE: fr
      SMTP_HOST: mailpit
      SMTP_PORT: 1025
      N8N_PERSONALIZATION_ENABLED: false
      N8N_DIAGNOSTICS_ENABLED: false
      DB_TYPE: ${DB_TYPE:-postgresdb}
      DB_POSTGRESDB_DATABASE: ${DB_TYPE:-n8n}
      DB_POSTGRESDB_HOST: ${DB_POSTGRESDB_HOST:-postgresql}
      DB_POSTGRESDB_PORT: ${DB_POSTGRESDB_PORT:-5432}
      DB_POSTGRESDB_USER: ${DB_POSTGRESDB_USER:-n8n}
      DB_POSTGRESDB_SCHEMA: ${DB_POSTGRESDB_SCHEMA:-public}
      DB_POSTGRESDB_PASSWORD: ${DB_PASSWORD}
    profiles:
      - admin

# pgAdmin
# Rich administration and development platform for PostgreSQL.
# https://www.pgadmin.org/

  pgadmin:
    container_name: r5a10-pgadmin
    image: dpage/pgadmin4:${PGADMIN_VERSION:-8.11}
    depends_on:
      postgresql:
        condition: service_healthy
    restart: no
    configs:
      - source: pgadmin_config
        target: /pgadmin4/servers.json
    volumes:
      - pgadmin:/var/lib/pgadmin/
    ports:
      - 3009:80
    environment:
      PGADMIN_DEFAULT_EMAIL: ${ADMIN_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${ADMIN_PASSWORD}
      PGADMIN_DISABLE_POSTFIX: true
    profiles:
      - admin

# PostgREST
# Serve a fully RESTful API from any existing PostgreSQL database.
# It provides a cleaner, more standards-compliant, faster API than you are likely to write from scratch.
# https://docs.postgrest.org/en/v12/

  postgrest:
    container_name:  r5a10-postgrest
    image: postgrest/postgrest:${POSTGREST_VERSION:-v12.2.3}
    restart: no
    depends_on:
      postgresql:
        condition: service_healthy
    command: postgrest
    ports:
      - 3005:3005
    environment:
      PGRST_DB_URI: postgres://${POSTGREST_USER:-postgrest}:${DB_PASSWORD}@${POSTGREST_HOST:-postgresql}:${POSTGREST_DB_PORT:-5432}/${DB_NAME:-postgrest}
      PGRST_DB_SCHEMAS: ${POSTGREST_DB_SCHEMAS:-public}
      PGRST_DB_ANON_ROLE: ${POSTGREST_DB_ANON_ROLE:-role_web}
      PGRST_JWT_SECRET: ${POSTGREST_JWT_SECRET:-ABCDEFGHIJKLMNOPQRSTUVWXYZ}
      PGRST_DB_USE_LEGACY_GUCS: ${POSTGREST_DB_USE_LEGACY_GUCS:-false}
      PGRST_APP_SETTINGS_JWT_SECRET: ${POSTGREST_APP_SETTINGS_JWT_SECRET}
      PGRST_APP_SETTINGS_JWT_EXP: ${POSTGREST_APP_SETTINGS_JWT_EXP}
      PGRST_ADMIN_SERVER_PORT: 3055
      PGRST_SERVER_PORT: 3005
    profiles:
      - rest

# redocly remplacer par scalar ?

  redocly:
    container_name: r5a10-redocly
    image: redocly/redoc
    depends_on:
      - postgrest
    ports:
      - 3008:80
    environment:
      SPEC_URL: http://localhost:3005
    profiles:
      - rest

# RabbitMQ
# Reliable and mature messaging and streaming broker, which is easy to deploy on cloud environments, on-premises, and on your local machine
# https://www.rabbitmq.com/
  rabbitmq:
    container_name: r5a10-rabbitmq
    image: rabbitmq:3-alpine
    ports:
      - 1883:1883
      - 15672:15672
      - 61613:61613
    volumes:
      - rabbitmq:/var/lib/rabbitmq
      - rabbitmq_log:/var/log/rabbitmq
    configs:
      - source: rabbit_enabled_plugins
        target: /etc/rabbitmq/enabled_plugins
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: supermotdepasse

# Memcached
# Free & open source, high-performance, distributed memory object caching system
# https://memcached.org/

  memcached:
    container_name: r5a10-memcached
    image: memcached:1.6

# Redis
# In-memory key-value database
# https://redis.io/fr/

  redis:
    container_name: r5a10-redis
    image: redis:${REDIS_VERSION:-7.2.5}
    restart: no
    command:
      - 'redis-server'
      - '--save 60 1'
      - '--loglevel warning'
      - '--requirepass ${DB_ROOT_PASSWORD}'
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${DB_ROOT_PASSWORD}", "--raw", "incr", "ping" ]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 20s
    volumes:
      - redis:/data
    profiles:
      - admin

# Mailpit
# email & SMTP testing tool with API for developers
# https://mailpit.axllent.org/

  mailpit:
    container_name: r5a10-mailpit
    image: axllent/mailpit:${MAILPIT_VERSION:-v1.20}
    restart: no
    ports:
      - 3010:8025
      - 1025:1025 # SMTP
    volumes:
      - mailpit:/data
    environment:
      TZ: Europe/Paris
    profiles:
      - admin

# Caddy
# Web server, load balancer, and reverse proxy
# https://caddyserver.com/
  caddy:
    container_name: r5a10-caddy
    image: caddy:${MAILPIT_VERSION:-2.8.4}
    restart: no
    ports:
      - 8080:80
      - 2019:2019
    volumes:
      - ./data:/usr/share/caddy
    profiles:
      - admin

# Minio
# Amazon S3 compatible object store. It is built for large scale AI/ML, data lake and database workloads.
# It is software-defined and runs on any cloud or on-premises infrastructure.
  minio:
    container_name: minio
    image: minio/minio
    command: server --console-address ":9001" /data
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-root}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-supermotdepasse}
      MINIO_DEFAULT_BUCKETS: loki
      MINIO_BROWSER_LOGIN_ANIMATION: off
      MINIO_PROMETHEUS_AUTH_TYPE: public
      MINIO_PROMETHEUS_URL: http://prometheus:9090
      MINIO_PROMETHEUS_JOB_ID: minio
    volumes:
      - ./data:/data
    ports:
      - 9000:9000
      - 9001:9001

# ######################################################################
# Oriented Documents Databases
#
# ######################################################################

# MongoDB
# MongoDB is a source-available, cross-platform, document-oriented database program. Classified as a NoSQL database product,
# https://www.mongodb.com/fr-fr

  mongodb:
    container_name: r5a10-mongodb
    image: mongo:${MONGODB_VERSION:-7.0.7-jammy}
    volumes:
      - mongodb_config:/data/configdb
      - mongodb:/data/db
    ports:
      - ${MONGODB_PORT:-27017}:27017
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME:-admin}
      MONGO_INITDB_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
    profiles:
      - document

# CouchDB
# Seamless multi-master sync, that scales from Big Data to Mobile.
# HTTP/JSON API.
# https://couchdb.apache.org/

  couchdb:
    container_name: r5a10-couchdb
    image: couchdb:${COUCH_DB_VERSION:-3.3}
    environment:
      COUCHDB_PASSWORD: ${DB_ROOT_PASSWORD}
      COUCHDB_USER: ${COUCHDB_USER:-admin}
    volumes:
      - couchdb:/opt/couchdb/data
    ports:
      - 5984:5984
    profiles:
      - document

# CouchBase
# NoSQL cloud database for cloud, mobile, analytic, AI, and edge computing application
# https://www.couchbase.com/

  couchbase:
    container_name: r5a10-couchbase
    image: couchbase:enterprise-${COUCHBASE_VERSION:-7.1.0}
    ports:
      - 8091:8091
    volumes:
      - couchbase:/data
    deploy:
      resources:
        limits:
          cpus: "0.50"
          memory: 1512M
    profiles:
      - document

# FerretDB
# A truly Open Source MongoDB alternative, built on Postgres
# https://www.ferretdb.com/

  ferretdb:
    container_name: r5a10-ferretdb
    image: ghcr.io/ferretdb/ferretdb
    depends_on:
      - postgresql
    healthcheck:
      test: ["CMD", "/ferretdb", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 20s
    ports:
      - 27017:27017
      - 8088:8088
    volumes:
      - ferretdb:/state
    environment:
      FERRETDB_POSTGRESQL_URL: postgres://ferretdb:motdepasse@postgresql:5432/ferretdb
      FERRETDB_TELEMETRY: disable
    profiles:
      - document

# ######################################################################
# Graph Databases
#
# ######################################################################

# Neo4J
# Des graphes ultra-rapides, à l’échelle du pétaoctet
# https://neo4j.com/fr/

  neo4j:
    container_name: r5a10-neo4j
    image: neo4j:${NEO4J_VERSION:-5.24.1-community}
    ports:
      - 7474:7474
      - 7687:7687
    volumes:
      - neo4j:/data
      - neo4j_logs:/logs
      - ./data:/csv
    environment:
      NEO4J_AUTH: neo4j/${DB_ROOT_PASSWORD}
    profiles:
      - graph

# PostGraphile
# Instant GraphQL API
# https://www.graphile.org/postgraphile/

  postgraphile:
    container_name: r5a10-postgraphile
    build:
      context: ./postgraphile
    restart: no
    depends_on:
      postgresql:
        condition: service_healthy
    command:
      [
        "--port", "${POSTGRAPHILE_PORT:-5000}",
        "--schema", "${POSTGRAPHILE_SCHEMA:-public}",
        "--enhance-graphiql",
        "--cors",
        "--allow-explain",
        "--dynamic-json",
        "--append-plugins",
        "postgraphile-plugin-connection-filter,postgraphile-plugin-fulltext-filter,@graphile/postgis,postgraphile-plugin-connection-filter-postgis"
      ]
    ports:
      - 3006:5000
    environment:
      - PGHOST=${POSTGRAPHILE_HOST:-postgresql}
      - PGPORT=${POSTGRAPHILE_DB_PORT:-5432}
      - PGUSER=${POSTGRAPHILE_DB_USER:-postgraphile}
      - PGPASSWORD=${DB_PASSWORD}
      - PGDATABASE=${DB_NAME:-ventdest}
    profiles:
      - graph

# Age Viewer
  age_viewer:
    container_name: r5a10-age_viewer
    tty: true
    build:
      context: ./age-viewer
    depends_on:
      postgresql:
        condition: service_healthy
    ports:
      - 3000:3000
    command: npm run start
    profiles:
      - graph

# ######################################################################
# Observabilité
#
# ######################################################################

# Grafana
# Open source analytics & monitoring solution for every database.
# https://grafana.com/

  grafana:
    container_name: r5a10-grafana
    image: grafana/grafana-oss:${GRAFANA_VERSION:-11.1.3}
    restart: no
    depends_on:
      - loki
    deploy:
      resources:
        limits:
          memory: 100M
    configs:
      - source: grafana_datasources
        target: /etc/grafana/provisioning/datasources
      - source: grafana_dashboards
        target: /etc/grafana/dashboards
    volumes:
      - grafana:/var/lib/grafana
    ports:
      - 3000:3000
    environment:
      #GF_SECURITY_ADMIN_EMAIL: ${ADMIN_EMAIL}
      #GF_SECURITY_ADMIN_PASSWORD: ${ADMIN_PASSWORD}
      GF_AUTH_ANONYMOUS_ENABLED: true  # Enabled the Anonymous user no user/pass needed
      GF_AUTH_ANONYMOUS_ORG_ROLE: Admin
      GF_AUTH_DISABLE_LOGIN_FORM: true
      GF_USERS_DEFAULT_THEME: light
      GF_USERS_ALLOW_SIGN_UP: false
      GF_FEATURE_TOGGLES_ENABLE: traceQLStreaming metricsSummary lokiFormatQuery alertmanagerRemoteOnly
      GF_INSTALL_PLUGINS: grafana-lokiexplore-app,yesoreyeram-infinity-datasource
    profiles:
      - telemetry

# Prometheus
# Prometheus is an open-source systems monitoring and alerting toolkit
# https://prometheus.io/

  prometheus:
    container_name: r5a10-prometheus
    image: prom/prometheus:${PROMETHEUS_VERSION:-v2.55.0}
    configs:
      - source: prometheus_config
        target: /etc/prometheus/prometheus.yml
    volumes:
      - prometheus:/prometheus
      - /var/run/docker.sock:/var/run/docker.sock:ro
    ports:
      - 9090:9090
    #extra_hosts:
    #  - host.docker.internal=host-gateway
    profiles:
      - telemetry

# Loki
# Loki is a log aggregation system designed to store and query logs from all your applications and infrastructure.
# https://grafana.com/oss/loki/

  loki:
    container_name: r5a10-loki
    image: grafana/loki:${LOKI_VERSION:-3.1.2}
    ports:
      - 3100:3100
    # configs:
    #   - source: loki_config
    #     target: /etc/loki/local-config.yaml
    profiles:
      - telemetry

# Grafana Alloy
# Open source OpenTelemetry collector with built-in Prometheus pipelines and support for metrics, logs, traces, and profiles.
# https://grafana.com/oss/alloy-opentelemetry-collector/

  alloy:
    container_name: r5a10-alloy
    image: grafana/alloy:${ALLOY_VERSION:-v1.4.3}
    configs:
      - source: alloy_config
        target: /etc/alloy/config.alloy
    ports:
      - 12345:12345
    profiles:
      - test

  opentelemetry-collector-contrib:
    container_name: r5a10-otel-collector
    image: otel/opentelemetry-collector-contrib:${OTEL_COLLECTOR_VERSION:-0.112.0}
    command: ["--config=/etc/otel-collector-config.yml"]
    configs:
      - source: otel_collector_config
        target: /etc/otel-collector-config.yml
    ports:
      - 4317:4317
      - 4318:4318
      - 55678:55678
      - 55679:55679
    profiles:
      - test
