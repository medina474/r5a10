\c ventdest

create table cinema.cinemas (
  cinema_id bigint not null,
  nom text,
  voie text,
  codepostal text,
  ville text,
  coordonnees postgis.geometry(Point, 4326) default null::postgis.geometry
);

create table cinema.personnes (
  personne_id uuid default gen_random_uuid() not null,
  nom text,
  prenom text,
  naissance date,
  deces date,
  nationalite text,
  artiste text,
  popularite decimal default 0
);

create table cinema.genres (
  genre_id integer not null,
  genre text not null
);


alter table cinema.personnes
  add constraint personne_nationalite
  check (char_length(nationalite) = 2) not valid;


create table cinema.films (
  film_id uuid default gen_random_uuid() not null,
  titre text not null,
  titre_original text,
  annee integer,
  sortie date,
  duree integer,
  franchise_id integer,
  slogan text,
  constraint film_pkey primary key (film_id)
);

create index on cinema.films 
  using btree (franchise_id);

create table cinema.franchises (
  franchise_id integer not null,
  franchise text not null
);

alter table cinema.franchises 
  alter column franchise_id 
    add generated by default as identity (
      sequence name franchise_id_seq
      start with 1
      increment by 1
      no minvalue
      no maxvalue
      cache 1
    );

alter table cinema.franchises
  add constraint franchises_pkey 
  primary key (franchise_id);

create table cinema.societes (
  societe_id uuid default gen_random_uuid() not null primary key,
  societe text not null,
  uei text
);

create table cinema.certifications (
  certification_id integer not null,
  pays text,
  ordre smallint,
  certification text,
  description text
);

alter table cinema.certifications 
  alter column certification_id 
    add generated by default as identity (
      sequence name certification_id_seq
      start with 1
      increment by 1
      no minvalue
      no maxvalue
      cache 1
    );

alter table cinema.certifications
  add constraint certifications_pkey 
  primary key (certification_id);

create table cinema.films_genres (
  film_id uuid not null,
  genre_id integer not null
);

create table cinema.productions (
  film_id uuid not null,
  societe_id uuid not null
);

create index on cinema.productions 
  using btree (film_id);

create index on cinema.productions 
  using btree (societe_id);

create table cinema.resumes (
  film_id uuid not null,
  langue_code text not null,
  resume text not null
);

alter table cinema.resumes add column ts tsvector
  generated always as (to_tsvector('french', resume)) stored;

create index resumes_texte_idx 
  on cinema.resumes using gin (ts);

create index resume_film_fki
  on cinema.resumes(film_id);

alter table cinema.films
  add column vote_votants integer,
  add column vote_moyenne decimal(4,2);

create table if not exists cinema.votes (
  userid int,
  film_id uuid,
  note decimal not null,
  timestamp timestamp not null
);



create index vote_film_fki
  on cinema.votes(film_id);

alter table cinema.votes
  add constraint note_check check (note >= 0 and note < 6) not valid;

create function vote_calcul()
  returns trigger
  language 'plpgsql'
as $body$
declare
  moyenne decimal(4,2);
  votants integer;
begin
  select count(*), avg(note) into votants, moyenne from cinema.votes where film_id = new.film_id;
  update films set vote_votants=coalesce(votants,0), vote_moyenne=coalesce(moyenne,0) where film_id = new.film_id;
  return new;
end
$body$;
